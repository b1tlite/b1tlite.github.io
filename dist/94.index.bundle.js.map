{"version":3,"file":"94.index.bundle.js","mappings":"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","sources":["webpack://sen/./node_modules/@web3auth/openlogin-adapter/dist/openloginAdapter.esm.js"],"sourcesContent":["import OpenLogin, { OPENLOGIN_NETWORK, UX_MODE, getHashQueryParams } from '@toruslabs/openlogin';\nimport { getChainConfig, BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, CHAIN_NAMESPACES, WalletInitializationError, ADAPTER_EVENTS, WalletLoginError } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport log from 'loglevel';\n\nconst getOpenloginDefaultOptions = (chainNamespace, chainId) => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : undefined,\n    loginSettings: {\n      relogin: true\n    }\n  };\n};\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass OpenloginAdapter extends BaseAdapter {\n  constructor(params) {\n    var _params$chainConfig, _params$chainConfig2, _params$chainConfig3;\n\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.OPENLOGIN);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.MULTICHAIN);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.IN_APP);\n\n    _defineProperty(this, \"openloginInstance\", null);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"openloginOptions\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"privKeyProvider\", null);\n\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);\n    this.openloginOptions = _objectSpread(_objectSpread({\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET\n    }, defaultOptions.adapterSettings), params.adapterSettings || {});\n    this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings); // if no chainNamespace is passed then chain config should be set before calling init\n\n    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {\n      var _params$chainConfig4;\n\n      this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n\n      if (!this.chainConfig.rpcTarget) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy() {\n    return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n  }\n\n  get provider() {\n    var _this$privKeyProvider;\n\n    return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    var _this$openloginOption;\n\n    super.checkInitializationRequirements();\n    if (!((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId)) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    const redirectResult = getHashQueryParams();\n    let isRedirectResult = true;\n\n    if (Object.keys(redirectResult).length > 0 && redirectResult.result) {\n      isRedirectResult = true;\n    }\n\n    await this.openloginInstance.init();\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params) {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {\n      adapter: WALLET_ADAPTERS.OPENLOGIN\n    }));\n\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error) {\n      log.error(\"Failed to connect with openlogin provider\", error); // ready again to be connected\n\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n\n      if (error !== null && error !== void 0 && error.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  } // should be called only before initialization.\n\n\n  setAdapterSettings(adapterSettings) {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);\n  } // should be called only before initialization.\n\n\n  setChainConfig(customChainConfig) {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  async connectWithProvider(params) {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const {\n        SolanaPrivateKeyProvider\n      } = await import('@web3auth/solana-provider');\n      this.privKeyProvider = new SolanaPrivateKeyProvider({\n        config: {\n          chainConfig: this.chainConfig\n        }\n      });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const {\n        EthereumPrivateKeyProvider\n      } = await import('@web3auth/ethereum-provider');\n      this.privKeyProvider = new EthereumPrivateKeyProvider({\n        config: {\n          chainConfig: this.chainConfig\n        }\n      });\n    } else {\n      throw new Error(\"Invalid chainNamespace: \".concat(this.currentChainNamespace, \" found while connecting to wallet\"));\n    } // if not logged in then login\n\n\n    if (!this.openloginInstance.privKey && params) {\n      await this.openloginInstance.login(merge(this.loginSettings, {\n        loginProvider: params.loginProvider\n      }, {\n        extraLoginOptions: {\n          login_hint: params === null || params === void 0 ? void 0 : params.login_hint\n        }\n      }));\n    }\n\n    let finalPrivKey = this.openloginInstance.privKey;\n\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const {\n          getED25519Key\n        } = await import('@toruslabs/openlogin-ed25519');\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.OPENLOGIN,\n        reconnected: !params\n      });\n    }\n  }\n\n}\n\nexport { OpenloginAdapter, getOpenloginDefaultOptions };\n//# sourceMappingURL=openloginAdapter.esm.js.map\n"],"names":["getOpenloginDefaultOptions","chainNamespace","chainId","adapterSettings","network","clientId","uxMode","chainConfig","undefined","loginSettings","relogin","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","OpenloginAdapter","constructor","params","_params$chainConfig","_params$chainConfig2","_params$chainConfig3","super","this","defaultOptions","openloginOptions","_params$chainConfig4","currentChainNamespace","defaultChainIdConfig","rpcTarget","chainConfigProxy","provider","_this$privKeyProvider","privKeyProvider","_","Error","async","options","_this$openloginOption","checkInitializationRequirements","openloginInstance","redirectResult","isRedirectResult","result","init","status","emit","privKey","autoConnect","connect","error","checkConnectionRequirements","adapter","connectWithProvider","message","includes","cleanup","logout","getUserInfo","setAdapterSettings","setChainConfig","customChainConfig","SolanaPrivateKeyProvider","config","concat","EthereumPrivateKeyProvider","login","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","sk","toString","setupProvider","reconnected"],"sourceRoot":""}