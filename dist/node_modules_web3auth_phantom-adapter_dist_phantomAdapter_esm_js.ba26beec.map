{"version":3,"file":"node_modules_web3auth_phantom-adapter_dist_phantomAdapter_esm_js.xxxxxxxx.js","mappings":";;;;;;;;;;;;;;;;;;AAAoE;AAC8J;AAC9J;AACzC;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;;AAEA,6BAA6B,uDAAW;AACxC;AACA;AACA;;AAEA,IAAI,iFAAe,eAAe,mEAAuB;;AAEzD,IAAI,iFAAe,2BAA2B,qEAAyB;;AAEvE,IAAI,iFAAe,gCAAgC,mEAAuB;;AAE1E,IAAI,iFAAe,eAAe,qEAAyB;;AAE3D,IAAI,iFAAe,iBAAiB,oEAAwB;;AAE5D,IAAI,iFAAe;;AAEnB,IAAI,iFAAe;;AAEnB,IAAI,iFAAe;;AAEnB,IAAI,iFAAe;AACnB;AACA;;AAEA,iCAAiC;;AAEjC,sCAAsC,oEAAwB,GAAG,gEAAoB,GAAG,oEAAwB;AAChH,kBAAkB,uEAA2B;AAC7C;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA,kIAAkI,oEAAwB;AAC1J;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,6CAA6C;;AAE7C;AACA,yBAAyB,8DAAc,CAAC,mEAAuB;AAC/D;;AAEA;AACA;AACA;AACA,KAAK;AACL,6BAA6B,kFAAsC;AACnE,+BAA+B,8EAAuB;AACtD;AACA;AACA;AACA,KAAK;AACL,kBAAkB,gEAAoB;AACtC,cAAc,gEAAoB,EAAE,mEAAuB;;AAE3D;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,qDAAS;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,qEAAyB;AAC7C,gBAAgB,qEAAyB;AACzC,iBAAiB,mEAAuB;AACxC,OAAO;AACP,+BAA+B,kFAAsC;;AAErE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,kFAAsC;;AAEnF,mDAAmD;;;AAGnD;AACA,qBAAqB,kFAAsC;;AAE3D,kFAAkF,aAAa;AAC/F;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb,WAAW;AACX,UAAU;AACV,+BAA+B,yDAAa;AAC5C,gBAAgB,4EAAgC;AAChD,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;;AAEA,yCAAyC,4EAAgC;;AAEzE;;AAEA;AACA,MAAM;AACN;AACA,oBAAoB,gEAAoB;AACxC;AACA,gBAAgB,kEAAsB;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,8EAAkC;;AAEzE;AACA;;AAEA;;AAEA;AACA,sBAAsB,oEAAwB;AAC9C;AACA;AACA;;AAEA,gBAAgB,uEAA2B;AAC3C,MAAM;AACN,gBAAgB,kEAAsB,EAAE,+EAAmC;AAC3E;AACA;;AAEA;AACA,uCAAuC,8EAAkC;AACzE;AACA;;AAEA;AACA,qCAAqC,4EAAgC;AACrE;AACA,kBAAkB,oEAAwB;AAC1C,cAAc,oEAAwB;AACtC,eAAe,mEAAuB;AACtC;AACA,KAAK;AACL;AACA;;AAEA;;AAE0B;AAC1B;;;;;;;;;;;ACzOA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA","sources":["webpack://sen/./node_modules/@web3auth/phantom-adapter/dist/phantomAdapter.esm.js","webpack://sen/ignored|C:\\Users\\Work\\Documents\\sources\\nft\\jslib\\node_modules\\@solana\\web3.js\\node_modules\\bn.js\\lib|buffer","webpack://sen/ignored|C:\\Users\\Work\\Documents\\sources\\nft\\jslib\\node_modules\\@toruslabs\\tweetnacl-js|crypto","webpack://sen/ignored|C:\\Users\\Work\\Documents\\sources\\nft\\jslib\\node_modules\\borsh\\node_modules\\bn.js\\lib|buffer","webpack://sen/ignored|C:\\Users\\Work\\Documents\\sources\\nft\\jslib\\node_modules\\ethereumjs-util\\node_modules\\bn.js\\lib|buffer","webpack://sen/ignored|C:\\Users\\Work\\Documents\\sources\\nft\\jslib\\node_modules\\tweetnacl|crypto"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS, getChainConfig, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { PhantomInjectedProvider } from '@web3auth/solana-provider';\nimport log from 'loglevel';\n\nfunction poll(callback, interval, count) {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done) poll(callback, interval, count - 1).then(res => {\n          resolve(res);\n          return res;\n        }).catch(err => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\nconst detectProvider = async function () {\n  var _window$solana;\n\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    interval: 1000,\n    count: 3\n  };\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!((_window$solana = window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom);\n\n  if (isPhantomAvailable) {\n    return window.solana;\n  }\n\n  const isAvailable = await poll(() => {\n    var _window$solana2;\n\n    return (_window$solana2 = window.solana) === null || _window$solana2 === void 0 ? void 0 : _window$solana2.isPhantom;\n  }, options.interval, options.count);\n  if (isAvailable) return window.solana;\n  return null;\n};\n\nclass PhantomAdapter extends BaseAdapter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.PHANTOM);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"_wallet\", null);\n\n    _defineProperty(this, \"phantomProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"_onDisconnect\", () => {\n      if (this._wallet) {\n        this._wallet.off(\"disconnect\", this._onDisconnect);\n\n        this.rehydrated = false; // ready to be connected again only if it was previously connected and not cleaned up\n\n        this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n        this.emit(ADAPTER_EVENTS.DISCONNECTED);\n      }\n    });\n\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get isWalletConnected() {\n    var _this$_wallet;\n\n    return !!((_this$_wallet = this._wallet) !== null && _this$_wallet !== void 0 && _this$_wallet.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider() {\n    var _this$phantomProvider;\n\n    return ((_this$phantomProvider = this.phantomProvider) === null || _this$phantomProvider === void 0 ? void 0 : _this$phantomProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(_) {}\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n\n    this._wallet = await detectProvider({\n      interval: 500,\n      count: 3\n    });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect() {\n    var _this = this;\n\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, {\n        adapter: WALLET_ADAPTERS.PHANTOM\n      });\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n\n        try {\n          await new Promise((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet);\n              resolve(this.provider);\n            };\n\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n\n            this._wallet.once(\"connect\", connect); // Raise an issue on phantom that if window is closed, disconnect event is not fired\n\n\n            this._wallet._handleDisconnect = function () {\n              reject(WalletInitializationError.windowClosed());\n\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              return handleDisconnect.apply(_this._wallet, args);\n            };\n\n            this._wallet.connect().catch(reason => {\n              reject(reason);\n            });\n          });\n        } catch (error) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError(error === null || error === void 0 ? void 0 : error.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      var _this$_wallet2;\n\n      await ((_this$_wallet2 = this._wallet) === null || _this$_wallet2 === void 0 ? void 0 : _this$_wallet2.disconnect());\n\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));\n    }\n  }\n\n  async getUserInfo() {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async connectWithProvider(injectedProvider) {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, {\n      adapter: WALLET_ADAPTERS.PHANTOM,\n      reconnected: this.rehydrated\n    });\n    return this.provider;\n  }\n\n}\n\nexport { PhantomAdapter };\n//# sourceMappingURL=phantomAdapter.esm.js.map\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"names":[],"sourceRoot":""}