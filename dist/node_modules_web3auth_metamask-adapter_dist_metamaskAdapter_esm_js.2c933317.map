{"version":3,"file":"node_modules_web3auth_metamask-adapter_dist_metamaskAdapter_esm_js.xxxxxxxx.js","mappings":";;;;;;;;;;;;;;;;;AAAoE;AACL;AACyJ;;AAExN,8BAA8B,uDAAW;AACzC;AACA;AACA;;AAEA,IAAI,iFAAe,2BAA2B,qEAAyB;;AAEvE,IAAI,iFAAe,gCAAgC,mEAAuB;;AAE1E,IAAI,iFAAe,eAAe,qEAAyB;;AAE3D,IAAI,iFAAe,eAAe,oEAAwB;;AAE1D,IAAI,iFAAe,iBAAiB,oEAAwB;;AAE5D,IAAI,iFAAe;;AAEnB,IAAI,iFAAe;;AAEnB;AACA;;AAEA;AACA,wBAAwB,oEAAwB;AAChD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,gEAAsB;AACxD;AACA,KAAK;AACL,sCAAsC,kFAAsC;AAC5E,kBAAkB,gEAAoB;AACtC,cAAc,gEAAoB,EAAE,oEAAwB;;AAE5D;AACA,MAAM,qDAAS;;AAEf;AACA;AACA;AACA;AACA,MAAM;AACN,gBAAgB,kEAAsB;AACtC;AACA;;AAEA;;AAEA;AACA,yCAAyC;;AAEzC,8CAA8C,8DAAc,CAAC,mEAAuB;AACpF,kBAAkB,qEAAyB;AAC3C,cAAc,qEAAyB;AACvC,eAAe,oEAAwB;AACvC,KAAK;AACL,sCAAsC,8EAAkC;;AAExE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,QAAQ;;AAER;AACA;AACA;;AAEA,oBAAoB,oEAAwB;AAC5C,gCAAgC,8EAAkC;AAClE;AACA;AACA;AACA,OAAO;AACP,gBAAgB,oEAAwB;AACxC,iBAAiB,oEAAwB;AACzC;AACA,OAAO;AACP;AACA,MAAM;AACN;AACA,oBAAoB,gEAAoB;AACxC;AACA,gBAAgB,kEAAsB;AACtC,YAAY,4EAAgC;AAC5C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,oEAAwB,QAAQ,+EAAmC;AAC3F;;AAEA;AACA,oBAAoB,oEAAwB;AAC5C;AACA,MAAM;AACN;AACA,oBAAoB,gEAAoB;AACxC;;AAEA;AACA,cAAc,uEAA2B;AACzC;;AAEA;AACA,wBAAwB,oEAAwB,QAAQ,8EAAkC;AAC1F;AACA;;AAEA;AACA,sCAAsC,8EAAkC;;AAExE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;;AAEA;;AAE2B;AAC3B","sources":["webpack://sen/./node_modules/@web3auth/metamask-adapter/dist/metamaskAdapter.esm.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BaseAdapter, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, log, getChainConfig, WalletLoginError } from '@web3auth/base';\n\nclass MetamaskAdapter extends BaseAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"metamaskProvider\", null);\n\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n\n    try {\n      log.debug(\"initializing metamask adapter\");\n\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_) {}\n\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect() {\n    var _this$provider;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n}\n\nexport { MetamaskAdapter };\n//# sourceMappingURL=metamaskAdapter.esm.js.map\n"],"names":[],"sourceRoot":""}