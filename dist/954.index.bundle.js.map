{"version":3,"file":"954.index.bundle.js","mappings":"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","sources":["webpack://sen/./node_modules/@web3auth/phantom-adapter/dist/phantomAdapter.esm.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS, getChainConfig, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { PhantomInjectedProvider } from '@web3auth/solana-provider';\nimport log from 'loglevel';\n\nfunction poll(callback, interval, count) {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done) poll(callback, interval, count - 1).then(res => {\n          resolve(res);\n          return res;\n        }).catch(err => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\nconst detectProvider = async function () {\n  var _window$solana;\n\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    interval: 1000,\n    count: 3\n  };\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!((_window$solana = window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom);\n\n  if (isPhantomAvailable) {\n    return window.solana;\n  }\n\n  const isAvailable = await poll(() => {\n    var _window$solana2;\n\n    return (_window$solana2 = window.solana) === null || _window$solana2 === void 0 ? void 0 : _window$solana2.isPhantom;\n  }, options.interval, options.count);\n  if (isAvailable) return window.solana;\n  return null;\n};\n\nclass PhantomAdapter extends BaseAdapter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.PHANTOM);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"_wallet\", null);\n\n    _defineProperty(this, \"phantomProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"_onDisconnect\", () => {\n      if (this._wallet) {\n        this._wallet.off(\"disconnect\", this._onDisconnect);\n\n        this.rehydrated = false; // ready to be connected again only if it was previously connected and not cleaned up\n\n        this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n        this.emit(ADAPTER_EVENTS.DISCONNECTED);\n      }\n    });\n\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get isWalletConnected() {\n    var _this$_wallet;\n\n    return !!((_this$_wallet = this._wallet) !== null && _this$_wallet !== void 0 && _this$_wallet.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider() {\n    var _this$phantomProvider;\n\n    return ((_this$phantomProvider = this.phantomProvider) === null || _this$phantomProvider === void 0 ? void 0 : _this$phantomProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(_) {}\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n\n    this._wallet = await detectProvider({\n      interval: 500,\n      count: 3\n    });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect() {\n    var _this = this;\n\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, {\n        adapter: WALLET_ADAPTERS.PHANTOM\n      });\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n\n        try {\n          await new Promise((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet);\n              resolve(this.provider);\n            };\n\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n\n            this._wallet.once(\"connect\", connect); // Raise an issue on phantom that if window is closed, disconnect event is not fired\n\n\n            this._wallet._handleDisconnect = function () {\n              reject(WalletInitializationError.windowClosed());\n\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              return handleDisconnect.apply(_this._wallet, args);\n            };\n\n            this._wallet.connect().catch(reason => {\n              reject(reason);\n            });\n          });\n        } catch (error) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError(error === null || error === void 0 ? void 0 : error.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      var _this$_wallet2;\n\n      await ((_this$_wallet2 = this._wallet) === null || _this$_wallet2 === void 0 ? void 0 : _this$_wallet2.disconnect());\n\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));\n    }\n  }\n\n  async getUserInfo() {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async connectWithProvider(injectedProvider) {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, {\n      adapter: WALLET_ADAPTERS.PHANTOM,\n      reconnected: this.rehydrated\n    });\n    return this.provider;\n  }\n\n}\n\nexport { PhantomAdapter };\n//# sourceMappingURL=phantomAdapter.esm.js.map\n"],"names":["poll","callback","interval","count","Promise","resolve","reject","setTimeout","async","done","then","res","catch","err","PhantomAdapter","constructor","options","arguments","length","undefined","super","this","_wallet","off","_onDisconnect","rehydrated","status","emit","chainConfig","isWalletConnected","_this$_wallet","isConnected","provider","_this$phantomProvider","phantomProvider","_","Error","setAdapterSettings","checkInitializationRequirements","_window$solana","window","solana","isPhantom","_window$solana2","detectProvider","PhantomInjectedProvider","config","autoConnect","connect","error","_this","checkConnectionRequirements","adapter","connectWithProvider","handleDisconnect","_handleDisconnect","once","_len","args","Array","_key","apply","reason","message","publicKey","on","cleanup","_this$_wallet2","disconnect","injectedProvider","setupProvider","reconnected"],"sourceRoot":""}