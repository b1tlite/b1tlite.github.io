{"version":3,"file":"429.xxxxxxxx.js","mappings":"6KAIA,MAAMA,UAAwB,KAC5BC,cACE,IAAIC,EAAiBC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GACzFG,SAEA,OAAgBC,KAAM,mBAAoB,cAE1C,OAAgBA,KAAM,wBAAyB,cAE/C,OAAgBA,KAAM,OAAQ,gBAE9B,OAAgBA,KAAM,OAAQ,gBAE9B,OAAgBA,KAAM,SAAU,iBAEhC,OAAgBA,KAAM,cAAc,IAEpC,OAAgBA,KAAM,mBAAoB,MAE1CA,KAAKC,YAAcN,EAAeM,aAAe,KAG/CC,eACF,OAAIF,KAAKG,SAAW,gBAA4BH,KAAKI,iBAC5CJ,KAAKI,iBAGP,KAGLF,aAASG,GACX,MAAM,IAAIC,MAAM,mBAGlBC,WAAWC,GAKT,GAJAT,MAAMU,kCACNT,KAAKI,uBAAyB,IAAuB,CACnDM,gBAAgB,KAEbV,KAAKI,iBAAkB,MAAM,kBAAuC,uCACzEJ,KAAKG,OAAS,WACdH,KAAKW,KAAK,WAAsB,eAEhC,IACMH,EAAQI,cACVZ,KAAKa,YAAa,QACZb,KAAKc,WAEb,MAAOC,GACPf,KAAKW,KAAK,aAAwBI,IAItCC,mBAAmBX,IAEnBE,gBAQE,GAPAR,MAAMkB,8BAEDjB,KAAKC,cAAaD,KAAKC,aAAc,QAAe,YAAyB,IAClFD,KAAKG,OAAS,gBACdH,KAAKW,KAAK,gBAA2B,CACnCO,QAAS,iBAENlB,KAAKI,iBAAkB,MAAM,uBAAmC,qCAErE,UACQJ,KAAKI,iBAAiBe,QAAQ,CAClCC,OAAQ,wBAEV,MAAM,QACJC,GACErB,KAAKI,iBAOT,GALIiB,IAAYrB,KAAKC,YAAYoB,eACzBrB,KAAKsB,YAAYtB,KAAKC,aAG9BD,KAAKG,OAAS,gBACTH,KAAKE,SAAU,MAAM,uBAAmC,mCAS7D,OARAF,KAAKE,SAASqB,KAAK,cAAc,KAE/BvB,KAAKwB,gBAEPxB,KAAKW,KAAK,eAA0B,CAClCO,QAAS,cACTO,YAAazB,KAAKa,aAEbb,KAAKE,SACZ,MAAOa,GAKP,MAHAf,KAAKG,OAAS,WACdH,KAAKa,YAAa,EAClBb,KAAKW,KAAK,aAAwBI,GAC5B,qBAAiC,yCAI3CR,mBACE,IAAImB,EAEJ,IAAIlB,EAAUZ,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAChF+B,SAAS,GAEX,GAAI3B,KAAKG,SAAW,eAA0B,MAAM,wBAAoC,6BACnD,QAApCuB,EAAiB1B,KAAKE,gBAAyC,IAAnBwB,GAAqCA,EAAeE,qBAE7FpB,EAAQmB,SACV3B,KAAKG,OAAS,eACdH,KAAKI,iBAAmB,MAGxBJ,KAAKG,OAAS,WAGhBH,KAAKa,YAAa,EAClBb,KAAKW,KAAK,mBAGZJ,oBACE,GAAIP,KAAKG,SAAW,eAA0B,MAAM,uBAAmC,yDACvF,MAAO,GAGTI,kBAAkBN,GAChB,IAAKD,KAAKI,iBAAkB,MAAM,uBAAmC,6BAErE,UACQJ,KAAKI,iBAAiBe,QAAQ,CAClCC,OAAQ,6BACRS,OAAQ,CAAC,CACPR,QAASpB,EAAYoB,YAGzB,MAAOS,GAEP,GAAyB,OAArBA,EAAYC,KAUd,MAAMD,QATA9B,KAAKI,iBAAiBe,QAAQ,CAClCC,OAAQ,0BACRS,OAAQ,CAAC,CACPR,QAASpB,EAAYoB,QACrBW,UAAW/B,EAAYgC,YACvBC,QAAS,CAACjC,EAAYkC","sources":["webpack://sen/./node_modules/@web3auth/metamask-adapter/dist/metamaskAdapter.esm.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BaseAdapter, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, getChainConfig, WalletLoginError } from '@web3auth/base';\n\nclass MetamaskAdapter extends BaseAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"metamaskProvider\", null);\n\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_) {}\n\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect() {\n    var _this$provider;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n}\n\nexport { MetamaskAdapter };\n//# sourceMappingURL=metamaskAdapter.esm.js.map\n"],"names":["MetamaskAdapter","constructor","adapterOptions","arguments","length","undefined","super","this","chainConfig","provider","status","metamaskProvider","_","Error","async","options","checkInitializationRequirements","mustBeMetaMask","emit","autoConnect","rehydrated","connect","error","setAdapterSettings","checkConnectionRequirements","adapter","request","method","chainId","switchChain","once","disconnect","reconnected","_this$provider","cleanup","removeAllListeners","params","switchError","code","chainName","displayName","rpcUrls","rpcTarget"],"sourceRoot":""}