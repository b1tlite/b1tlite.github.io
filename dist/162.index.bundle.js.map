{"version":3,"file":"162.index.bundle.js","mappings":"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","sources":["webpack://sen/./node_modules/@web3auth/wallet-connect-v1-adapter/dist/walletConnectV1Adapter.esm.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport WalletConnect from '@walletconnect/client';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError, isHexStrict } from '@web3auth/base';\nimport { WalletConnectProvider } from '@web3auth/ethereum-provider';\nimport log from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nclass WalletConnectV1Adapter extends BaseAdapter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.WALLET_CONNECT_V1);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"adapterOptions\", void 0);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"adapterData\", {\n      uri: \"\"\n    });\n\n    _defineProperty(this, \"connector\", null);\n\n    _defineProperty(this, \"wcProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.adapterOptions = _objectSpread({}, options);\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get connected() {\n    var _this$connector;\n\n    return !!((_this$connector = this.connector) !== null && _this$connector !== void 0 && _this$connector.connected);\n  }\n\n  get provider() {\n    var _this$wcProvider;\n\n    return ((_this$wcProvider = this.wcProvider) === null || _this$wcProvider === void 0 ? void 0 : _this$wcProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init() {\n    super.checkInitializationRequirements();\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    } // Create a connector\n\n\n    this.connector = this.getWalletConnectInstance();\n    this.wcProvider = new WalletConnectProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n    this.status = ADAPTER_STATUS.READY;\n\n    if (this.connector.connected) {\n      this.rehydrated = true;\n      await this.onConnectHandler({\n        accounts: this.connector.accounts,\n        chainId: this.connector.chainId.toString()\n      });\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n\n    if (this.connected) {\n      await this.onConnectHandler({\n        accounts: this.connector.accounts,\n        chainId: this.connector.chainId.toString()\n      });\n      return this.provider;\n    }\n\n    if (this.status !== ADAPTER_STATUS.CONNECTING) {\n      var _this$adapterOptions$;\n\n      // for wallet connect qr code modal we have to create a new connector, coz wallet connect internally does not open\n      // modal again on existing instance if connection is pending.\n      if ((_this$adapterOptions$ = this.adapterOptions.adapterSettings) !== null && _this$adapterOptions$ !== void 0 && _this$adapterOptions$.qrcodeModal) {\n        this.connector = this.getWalletConnectInstance();\n      }\n\n      await this.createNewSession();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, {\n        adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\")); // for wallet connect default modal.\n\n      this.connector.on(\"modal_closed\", async () => {\n        this.status = ADAPTER_STATUS.READY;\n        this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n        return reject(new Error(\"User closed modal\"));\n      });\n\n      try {\n        // Subscribe to session connection\n        this.connector.on(\"connect\", async (error, payload) => {\n          if (error) {\n            this.emit(ADAPTER_EVENTS.ERRORED, error);\n          }\n\n          await this.onConnectHandler(payload.params[0]);\n          return resolve(this.provider);\n        });\n      } catch (error) {\n        log.error(\"Wallet connect v1 adapter error while connecting\", error); // ready again to be connected\n\n        this.status = ADAPTER_STATUS.READY;\n        this.rehydrated = true;\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        reject(error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with wallet connect: \".concat((error === null || error === void 0 ? void 0 : error.message) || \"\")));\n      }\n    });\n  }\n\n  async getUserInfo() {\n    if (!this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    const {\n      cleanup\n    } = options;\n    if (!this.connector || !this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    await this.connector.killSession();\n    this.rehydrated = false;\n\n    if (cleanup) {\n      this.connector = null;\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.wcProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async createNewSession() {\n    var _this$adapterOptions, _this$adapterOptions$2;\n\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      forceNewSession: false\n    };\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n\n    if (opts.forceNewSession && this.connector.pending) {\n      await this.connector.killSession();\n    } // for wallet connect qr modal\n\n\n    if ((_this$adapterOptions = this.adapterOptions) !== null && _this$adapterOptions !== void 0 && (_this$adapterOptions$2 = _this$adapterOptions.adapterSettings) !== null && _this$adapterOptions$2 !== void 0 && _this$adapterOptions$2.qrcodeModal) {\n      var _this$chainConfig;\n\n      await this.connector.createSession({\n        chainId: parseInt(((_this$chainConfig = this.chainConfig) === null || _this$chainConfig === void 0 ? void 0 : _this$chainConfig.chainId) || \"0x1\", 16)\n      });\n      return;\n    } // for web3auth qr code modal\n\n\n    return new Promise((resolve, reject) => {\n      var _this$chainConfig2;\n\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      log.debug(\"creating new session for web3auth wallet connect\");\n      this.connector.on(\"display_uri\", async (err, payload) => {\n        var _this$connector2;\n\n        if (err) {\n          this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.connectionError(\"Failed to display wallet connect qr code\"));\n          return reject(err);\n        }\n\n        const uri = payload.params[0];\n        this.updateAdapterData({\n          uri\n        });\n        (_this$connector2 = this.connector) === null || _this$connector2 === void 0 ? void 0 : _this$connector2.off(\"display_uri\");\n        return resolve();\n      });\n      this.connector.createSession({\n        chainId: parseInt(((_this$chainConfig2 = this.chainConfig) === null || _this$chainConfig2 === void 0 ? void 0 : _this$chainConfig2.chainId) || \"0x1\", 16)\n      }).catch(error => {\n        log.error(\"error while creating new wallet connect session\", error);\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        return reject(error);\n      });\n    });\n  }\n\n  async onConnectHandler(params) {\n    if (!this.connector || !this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"Chain config is not set\");\n    const {\n      chainId\n    } = params;\n    log.debug(\"connected chainId\", chainId);\n    const connectedChainId = parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n\n    if (connectedChainId !== parseInt(this.chainConfig.chainId, 16)) {\n      // we need to create a new session since old session is already used and\n      // user needs to login again with correct chain with new qr code.\n      await this.createNewSession({\n        forceNewSession: true\n      });\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletInitializationError.fromCode(5000, \"Not connected to correct chainId. Expected: \".concat(this.chainConfig.chainId, \", Current: \").concat(connectedChainId, \", Please switch to correct chain from wallet\")));\n      return;\n    }\n\n    await this.wcProvider.setupProvider(this.connector);\n    this.subscribeEvents(this.connector);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, {\n      adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1,\n      reconnected: this.rehydrated\n    });\n  }\n\n  subscribeEvents(connector) {\n    connector.on(\"session_update\", async error => {\n      if (error) {\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n      }\n    });\n  }\n\n  getWalletConnectInstance() {\n    const walletConnectOptions = this.adapterOptions.adapterSettings || {};\n    walletConnectOptions.bridge = walletConnectOptions.bridge || \"https://bridge.walletconnect.org\"; // Create a connector\n\n    return new WalletConnect(walletConnectOptions);\n  }\n\n}\n\nexport { WalletConnectV1Adapter };\n//# sourceMappingURL=walletConnectV1Adapter.esm.js.map\n"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","WalletConnectV1Adapter","constructor","options","arguments","length","undefined","super","this","uri","adapterOptions","target","i","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectSpread","chainConfig","connected","_this$connector","connector","provider","_this$wcProvider","wcProvider","_","Error","async","checkInitializationRequirements","getWalletConnectInstance","WalletConnectProvider","config","emit","status","rehydrated","onConnectHandler","accounts","chainId","toString","checkConnectionRequirements","_this$adapterOptions$","adapterSettings","qrcodeModal","createNewSession","adapter","Promise","resolve","reject","on","error","payload","params","concat","message","cleanup","killSession","_this$adapterOptions","_this$adapterOptions$2","opts","forceNewSession","pending","_this$chainConfig2","err","_this$connector2","updateAdapterData","off","createSession","parseInt","catch","_this$chainConfig","connectedChainId","setupProvider","subscribeEvents","reconnected","walletConnectOptions","bridge"],"sourceRoot":""}