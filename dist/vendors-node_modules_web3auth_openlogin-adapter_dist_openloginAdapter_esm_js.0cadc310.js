"use strict";
(self["webpackChunksen"] = self["webpackChunksen"] || []).push([["vendors-node_modules_web3auth_openlogin-adapter_dist_openloginAdapter_esm_js"],{

/***/ "./node_modules/@web3auth/openlogin-adapter/dist/openloginAdapter.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@web3auth/openlogin-adapter/dist/openloginAdapter.esm.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OpenloginAdapter": () => (/* binding */ OpenloginAdapter),
/* harmony export */   "getOpenloginDefaultOptions": () => (/* binding */ getOpenloginDefaultOptions)
/* harmony export */ });
/* harmony import */ var _toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @toruslabs/openlogin */ "./node_modules/@toruslabs/openlogin/dist/openlogin.esm.js");
/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @web3auth/base */ "./node_modules/@web3auth/base/dist/base.esm.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @web3auth/base-provider */ "./node_modules/@web3auth/base-provider/dist/baseProvider.esm.js");
/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash.merge */ "./node_modules/lodash.merge/index.js");
/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_4__);






const getOpenloginDefaultOptions = (chainNamespace, chainId) => {
  return {
    adapterSettings: {
      network: _toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_0__.OPENLOGIN_NETWORK.MAINNET,
      clientId: "",
      uxMode: _toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_0__.UX_MODE.POPUP
    },
    chainConfig: chainNamespace ? (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.getChainConfig)(chainNamespace, chainId) : null,
    loginSettings: {}
  };
};

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class OpenloginAdapter extends _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.BaseAdapter {
  constructor(params) {
    var _params$chainConfig, _params$chainConfig2, _params$chainConfig3;

    super();

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "name", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.OPENLOGIN);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "adapterNamespace", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_NAMESPACES.MULTICHAIN);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "type", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_CATEGORY.IN_APP);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "openloginInstance", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "status", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.NOT_READY);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "currentChainNamespace", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.EIP155);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "openloginOptions", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "loginSettings", {});

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "privKeyProvider", null);

    _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.debug("const openlogin adapter", params);
    const defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);
    this.openloginOptions = _objectSpread(_objectSpread({
      clientId: "",
      network: _toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_0__.OPENLOGIN_NETWORK.MAINNET
    }, defaultOptions.adapterSettings), params.adapterSettings || {});
    this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings); // if no chainNamespace is passed then chain config should be set before calling init

    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace && params.chainConfig.chainNamespace !== _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.OTHER) {
      var _params$chainConfig4;

      this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;
      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};
      this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);
      _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.debug("const openlogin chainConfig", this.chainConfig);

      if (!this.chainConfig.rpcTarget) {
        throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.invalidParams("rpcTarget is required in chainConfig");
      }
    }
  }

  get chainConfigProxy() {
    return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;
  }

  get provider() {
    var _this$privKeyProvider;

    return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;
  }

  set provider(_) {
    throw new Error("Not implemented");
  }

  async init(options) {
    var _this$openloginOption;

    super.checkInitializationRequirements();
    if (!((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId)) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.invalidParams("clientId is required before openlogin's initialization");
    if (!this.chainConfig && this.currentChainNamespace !== _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.OTHER) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.invalidParams("chainConfig is required before initialization");
    let isRedirectResult = false;

    if (this.openloginOptions.uxMode === _toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_0__.UX_MODE.REDIRECT) {
      const redirectResult = (0,_toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_0__.getHashQueryParams)();

      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {
        isRedirectResult = true;
      }
    }

    this.openloginOptions = _objectSpread(_objectSpread({}, this.openloginOptions), {}, {
      replaceUrlOnRedirect: isRedirectResult
    });
    this.openloginInstance = new _toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_0__["default"](this.openloginOptions);
    _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.debug("initializing openlogin adapter init");
    await this.openloginInstance.init();
    this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY;
    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.READY, _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.OPENLOGIN);

    try {
      _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.debug("initializing openlogin adapter"); // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true

      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {
        await this.connect();
      }
    } catch (error) {
      _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.error("Failed to connect with cached openlogin provider", error);
      this.emit("ERRORED", error);
    }
  }

  async connect(params) {
    super.checkConnectionRequirements();
    this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTING;
    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {
      adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.OPENLOGIN
    }));

    try {
      await this.connectWithProvider(params);
      return this.provider;
    } catch (error) {
      _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.error("Failed to connect with openlogin provider", error); // ready again to be connected

      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY;
      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.ERRORED, error);

      if (error !== null && error !== void 0 && error.message.includes("user closed popup")) {
        throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.popupClosed();
      }

      throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.connectionError("Failed to login with openlogin");
    }
  }

  async disconnect() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      cleanup: false
    };
    if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.notConnectedError("Not connected with wallet");
    if (!this.openloginInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notReady("openloginInstance is not ready");
    await this.openloginInstance.logout();

    if (options.cleanup) {
      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.NOT_READY;
      this.openloginInstance = null;
      this.privKeyProvider = null;
    } else {
      // ready to be connected again
      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY;
    }

    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.DISCONNECTED);
  }

  async getUserInfo() {
    if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.notConnectedError("Not connected with wallet");
    if (!this.openloginInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notReady("openloginInstance is not ready");
    const userInfo = await this.openloginInstance.getUserInfo();
    return userInfo;
  } // should be called only before initialization.


  setAdapterSettings(adapterSettings) {
    if (this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY) return;
    const defaultOptions = getOpenloginDefaultOptions();
    this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);
  } // should be called only before initialization.


  setChainConfig(customChainConfig) {
    super.setChainConfig(customChainConfig);
    this.currentChainNamespace = customChainConfig.chainNamespace;
  }

  async connectWithProvider(params) {
    if (!this.chainConfig) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.invalidParams("chainConfig is required before initialization");
    if (!this.openloginInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notReady("openloginInstance is not ready");

    if (this.currentChainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.SOLANA) {
      const {
        SolanaPrivateKeyProvider
      } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_tweetnacl_nacl-fast_js"), __webpack_require__.e("vendors-node_modules_toruslabs_tweetnacl-js_nacl-fast_js"), __webpack_require__.e("vendors-node_modules_web3auth_solana-provider_dist_solanaProvider_esm_js"), __webpack_require__.e("_6c05-_1ce7-_866b-_dba7")]).then(__webpack_require__.bind(__webpack_require__, /*! @web3auth/solana-provider */ "./node_modules/@web3auth/solana-provider/dist/solanaProvider.esm.js"));
      this.privKeyProvider = new SolanaPrivateKeyProvider({
        config: {
          chainConfig: this.chainConfig
        }
      });
    } else if (this.currentChainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.EIP155) {
      const {
        EthereumPrivateKeyProvider
      } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_tweetnacl_nacl-fast_js"), __webpack_require__.e("vendors-node_modules_web3auth_ethereum-provider_dist_ethereumProvider_esm_js"), __webpack_require__.e("_44dc-_dba7")]).then(__webpack_require__.bind(__webpack_require__, /*! @web3auth/ethereum-provider */ "./node_modules/@web3auth/ethereum-provider/dist/ethereumProvider.esm.js"));
      this.privKeyProvider = new EthereumPrivateKeyProvider({
        config: {
          chainConfig: this.chainConfig
        }
      });
    } else if (this.currentChainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.OTHER) {
      this.privKeyProvider = new _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_3__.CommonPrivateKeyProvider();
    } else {
      throw new Error("Invalid chainNamespace: ".concat(this.currentChainNamespace, " found while connecting to wallet"));
    } // if not logged in then login


    if (!this.openloginInstance.privKey && params) {
      var _params$extraLoginOpt;

      await this.openloginInstance.login(lodash_merge__WEBPACK_IMPORTED_MODULE_4___default()(this.loginSettings, {
        loginProvider: params.loginProvider
      }, {
        extraLoginOptions: _objectSpread(_objectSpread({}, params.extraLoginOptions || {}), {}, {
          login_hint: params.login_hint || ((_params$extraLoginOpt = params.extraLoginOptions) === null || _params$extraLoginOpt === void 0 ? void 0 : _params$extraLoginOpt.login_hint)
        })
      }));
    }

    let finalPrivKey = this.openloginInstance.privKey;

    if (finalPrivKey) {
      if (this.currentChainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.SOLANA) {
        const {
          getED25519Key
        } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_toruslabs_tweetnacl-js_nacl-fast_js"), __webpack_require__.e("node_modules_toruslabs_openlogin-ed25519_dist_openloginEd25519_esm_js")]).then(__webpack_require__.bind(__webpack_require__, /*! @toruslabs/openlogin-ed25519 */ "./node_modules/@toruslabs/openlogin-ed25519/dist/openloginEd25519.esm.js"));
        finalPrivKey = getED25519Key(finalPrivKey).sk.toString("hex");
      }

      await this.privKeyProvider.setupProvider(finalPrivKey);
      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED;
      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.CONNECTED, {
        adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.OPENLOGIN,
        reconnected: !params
      });
    }
  }

}


//# sourceMappingURL=openloginAdapter.esm.js.map


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_web3auth_openlogin-adapter_dist_openloginAdapter_esm_js.62c8109e.map